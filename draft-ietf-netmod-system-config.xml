<?xml version="1.0" encoding="US-ASCII"?>
<!-- This template is for creating an Internet Draft using xml2rfc,
     which is available here: http://xml.resource.org. -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- One method to get references from the online citation libraries.
     There has to be one entity for each item to be referenced.
     An alternate method (rfc include) is described in the references. -->
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6241 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY RFC7950 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7950.xml">
<!ENTITY RFC7149 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7149.xml">
<!ENTITY RFC7426 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7426.xml">
<!ENTITY RFC8299 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8299.xml">
<!ENTITY RFC8309 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8309.xml">
<!ENTITY RFC8340 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8340.xml">
<!ENTITY RFC8453 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8453.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8345 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8345.xml">
]>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!-- used by XSLT processors -->
<!-- For a complete list and description of processing instructions (PIs),
     please see http://xml.resource.org/authoring/README.html. -->
<!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
     (Here they are set differently than their defaults in xml2rfc v1.32) -->
<?rfc strict="yes" ?>
<!-- give errors regarding ID-nits and DTD validation -->
<!-- control the table of contents (ToC) -->
<?rfc toc="yes"?>
<!-- generate a ToC -->
<?rfc tocdepth="4"?>
<!-- the number of levels of subsections in ToC. default: 3 -->
<!-- control references -->
<?rfc symrefs="yes"?>
<!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
<?rfc sortrefs="yes" ?>
<!-- sort the reference entries alphabetically -->
<!-- control vertical white space
     (using these PIs as follows is recommended by the RFC Editor) -->
<?rfc compact="yes" ?>
<!-- do not start each main section on a new page -->
<?rfc subcompact="no" ?>
<!-- keep one blank line between list items -->
<!-- end of list of popular I-D processing instructions -->
<rfc category="std" docName="draft-ietf-netmod-system-config-latest"
     ipr="trust200902" submissionType="IETF" updates="8342">
  <front>
    <title abbrev="System-defined Configuration">System-defined
    Configuration</title>

    <author fullname="Qiufang Ma" initials="Q." role="editor" surname="Ma">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>101 Software Avenue, Yuhua District</street>

          <city>Nanjing</city>

          <region>Jiangsu</region>

          <code>210012</code>

          <country>China</country>
        </postal>

        <email>maqiufang1@huawei.com</email>
      </address>
    </author>

    <author fullname="Qin Wu" initials="Q." surname="Wu">
      <organization>Huawei</organization>

      <address>
        <postal>
          <street>101 Software Avenue, Yuhua District</street>

          <city>Nanjing</city>

          <region>Jiangsu</region>

          <code>210012</code>

          <country>China</country>
        </postal>

        <email>bill.wu@huawei.com</email>
      </address>
    </author>

    <author fullname="Chong Feng" initials="C." surname="Feng">
      <organization/>

      <address>
        <email>fengchongllly@gmail.com</email>
      </address>
    </author>

    <date year="2025"/>

    <area>ops</area>

    <workgroup>NETMOD</workgroup>

    <keyword>system config</keyword>

    <abstract>
      <t>The Network Management Datastore Architecture (NMDA) in RFC 8342
      defines several configuration datastores holding configuration. The
      contents of these configuration datastores are controlled by clients.
      This document introduces the concept of system configuration datastore
      holding configuration controlled by the system on which a server is
      running. The system configuration can be referenced (e.g., leafref) by
      configuration explicitly created by clients.</t>

      <t>This document updates RFC 8342.</t>
    </abstract>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>The Network Management Datastore Architecture (NMDA) <xref
      target="RFC8342"/> defines system configuration as the configuration
      that is supplied by the device itself and appears in &lt;operational&gt;
      when it is in use (Figure 2 in <xref target="RFC8342"/>).</t>

      <t>However, there is a desire to enable a server to better expose the
      system configuration, regardless of whether it is in use. For example,
      some implementations defines the system configuration which must be
      referenced to be active. NETCONF/RESTCONF clients can benefit from a
      standard mechanism to retrieve what system configuration is available on
      a server.</t>

      <t>Some servers allow the descendant nodes of system-defined
      configuration to be configured or modified. For example, the system
      configuration may contain an almost empty physical interface, whose
      existence in the system configuration is tied to the presence of
      particular hardware, while the client needs to be able to add, modify,
      or remove a number of descendant nodes. Some descendant nodes may not be
      modifiable (e.g., the interface "type" set by the system).</t>

      <t>This document updates the NMDA defined in <xref target="RFC8342"/>
      with a read-only conventional configuration datastore called "system" to
      expose system-defined configuration. The solution enables configuration
      explicitly created by the clients to reference nodes defined in
      &lt;system&gt;, override system-provided values, and configure
      descendant nodes of system-defined configuration.</t>

      <t>The solution defined in this document requires the use of NMDA for
      both clients and servers. Conformance to this document requires NMDA
      servers implement the "ietf-system-datastore" YANG module (<xref
      target="system-datastore"/>).</t>

      <section anchor="terminology" title="Terminology">
        <t>This document assumes that the reader is familiar with the contents
        of <xref target="RFC6241"/>, <xref target="RFC7950"/>, <xref
        target="RFC8342"/>, <xref target="RFC8407"/>, and <xref
        target="RFC8525"/> and uses terminologies from those documents.</t>

        <t>The following terms are defined in this document:<list
            style="hanging">
            <t hangText="system configuration: "><xref format="none"
            target="RFC8342">RFC 8342</xref> defines it as "Configuration that
            is supplied by the device itself." The definition herein refines
            that definition of system configuration to represent configuration
            present in the system configuration datastore (regardless of
            whether it is applied or referenced). It may also be referred to
            as "system-defined configuration" or "system-provided
            configuration" throughout this document.</t>

            <t hangText="system configuration datastore: ">A configuration
            datastore holding configuration provided by the system itself.
            This datastore is referred to as "&lt;system&gt;".</t>
          </list>This document redefines the term "conventional configuration
        datastore" in <xref section="3" sectionFormat="of" target="RFC8342"/>
        to add "system" to the list of conventional configuration
        datastores:<list style="hanging">
            <t hangText="conventional configuration datastore: ">One of the
            following set of configuration datastores: &lt;running&gt;,
            &lt;startup&gt;, &lt;candidate&gt;, &lt;system&gt;, and
            &lt;intended&gt;. These datastores share a common datastore
            schema, and protocol operations allow copying data between these
            datastores. The term "conventional" is chosen as a generic
            umbrella term for these datastores.</t>

            <t hangText="system node: ">An instance in the data tree that is
            provided by the system itself. System node may also be called
            "system-defined node" or "system-provided node" throughout this
            document.</t>

            <t hangText="referenced node: ">A referenced node is one of:<list
                style="symbols">
                <t>Targets of leafref values defined via the "path"
                statement.</t>

                <t>Targets of "instance-identifier" type values.</t>

                <t>Nodes present in an XPath expression of "when"
                constraints.</t>

                <t>Nodes present in an XPath expression of "must"
                constraints.</t>

                <t>Nodes defined to satisfy the "mandatory true"
                constraints.</t>

                <t>Nodes defined to satisfy the "min-elements"
                constraints.</t>
              </list></t>
          </list></t>
      </section>

      <section title="Requirements Language">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in BCP
        14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
        when, they appear in all capitals, as shown here.</t>
      </section>

      <section title="Updates to RFC 8342">
        <t>This document updates <xref format="none" target="RFC8342">RFC
        8342</xref> to define a configuration datastore called "system" to
        hold system configuration (<xref target="system-ds-def"/>), it also
        redefines the term "conventional configuration datastore" from <xref
        target="RFC8342"/> to add "system" to the list of conventional
        configuration datastores.</t>

        <t>Configuration in &lt;running&gt; is merged with &lt;system&gt; to
        create the contents of &lt;intended&gt; after the configuration
        transformations (e.g., template expansion, removal of inactive
        configuration defined in <xref target="RFC8342"/>) have been
        performed, as described in <xref target="conceptual-model"/>.</t>

        <t>This document also updates the definition of "intended" origin
        metadata annotation identity defined in <xref section="5.3.4"
        sectionFormat="of" target="RFC8342"/>. The "intended" identity of
        origin value defined in <xref target="RFC8342"/> represents the origin
        of configuration provided by &lt;intended&gt;, this document updates
        its definition as the origin source of configuration explicitly
        provided by clients, and allows a subset of configuration in
        &lt;intended&gt; that flows from &lt;system&gt; yet is not configured
        or overridden explicitly in &lt;running&gt; to use "system" as its
        origin value. As per <xref section="5.3.4" sectionFormat="of"
        target="RFC8342"/>, all configuration with origin value being reported
        as "intended" MUST originate from &lt;running&gt;, which includes any
        configuration in &lt;system&gt; that has been copied into
        &lt;running&gt;. Configuration that is in &lt;system&gt; and not also
        present in &lt;running&gt; MUST be reported as origin "system" in
        &lt;operational&gt;.</t>
      </section>
    </section>

    <section anchor="categories" title="Kinds of System Configuration">
      <t>This document defines two types of system configuration.
      Configuration that is always-present and configuration that is
      conditionally-present. These types of system configuration are described
      in <xref target="immediate"/> and <xref target="conditional"/>,
      respectively.</t>

      <section anchor="immediate" title="Always-Present">
        <t>Always-present refers to system configuration which is generated in
        &lt;system&gt; when the device is powered on, irrespective of physical
        resource present or not, a special functionality enabled or not. An
        example of always-present system configuration is an always-existing
        loopback interface.</t>
      </section>

      <section anchor="conditional" title="Conditionally-Present">
        <t>Conditionally-present refers to system configuration which is
        generated in &lt;system&gt; based on specific conditions being met in
        a system. For example, if a physical resource is present (e.g., an
        interface card is inserted), the system automatically detects it and
        loads the associated configuration; when the physical resource is not
        present (an interface card is removed), the system configuration will
        automatically be removed from &lt;system&gt;. Another example is when
        a special functionality is enabled, e.g., when a license or feature is
        enabled, specific configuration may be created by the system.</t>
      </section>
    </section>

    <section anchor="system-ds-def"
             title="The System Configuration Datastore (&lt;system&gt;)">
      <t>Following guidelines for defining datastores in the <xref section="A"
      sectionFormat="of" target="RFC8342"/>, this document introduces a new
      datastore resource named "system" that represents the system
      configuration. NMDA servers compliant with this document MUST implement
      a system configuration datastore, and they SHOULD also implement
      &lt;intended&gt;.</t>

      <t><list style="symbols">
          <t>Name: "system".</t>

          <t>YANG modules: all.</t>

          <t>YANG nodes: all "config true" data nodes up to the root of the
          tree, generated by the system.</t>

          <t>Management operations: The datastore can be read using network
          management protocols such as NETCONF and RESTCONF, but its contents
          cannot be changed by manage operations via NETCONF and RESTCONF
          protocols.</t>

          <t>Origin: This document does not define any new origin identity.
          The "system" identity of origin metadata annotation <xref
          target="RFC7952"/> is used to indicate the origin of a data item
          provided by the system.</t>

          <t>Protocols: YANG-driven management protocols, such as NETCONF and
          RESTCONF.</t>

          <t>Defining YANG module: "ietf-system-datastore" (<xref
          target="system-datastore"/>).</t>
        </list></t>

      <t>The system configuration datastore doesn't persist across
      reboots.</t>
    </section>

    <section anchor="conceptual-model" title="Conceptual Model of Datastores">
      <t>Clients may provide configuration nodes that reference nodes defined
      in &lt;system&gt;, override system-provided values, and configure
      descendant nodes of system-defined configuration in &lt;running&gt;, as
      detailed in <xref target="dynamic"/>.</t>

      <t>To ensure the validity of &lt;intended&gt;, configuration in
      &lt;running&gt; is merged with &lt;system&gt; to become
      &lt;intended&gt;, in which process, configuration appearing in
      &lt;running&gt; takes precedence over the same node in &lt;system&gt;.
      Since it is unspecified how to merge configuration before
      transformations, if &lt;system&gt; or &lt;running&gt; includes
      configuration that requires further transformation (e.g., template
      expansion, removal of inactive configuration defined in <xref
      target="RFC8342"/>) before it can be applied, configuration
      transformations MUST be performed before &lt;running&gt; is merged with
      &lt;system&gt;.</t>

      <t>Whenever configuration in &lt;system&gt; changes, the server MUST
      also immediately update and validate &lt;intended&gt;.</t>

      <t>As a result, Figure 2 in <xref section="5" sectionFormat="of"
      target="RFC8342"/> is updated with the below conceptual model of
      datastores which incorporates the system configuration datastore.<figure
          align="center" title="Architectural Model of Datastores">
          <artwork>               +-------------+                 +-----------+
               | &lt;candidate&gt; |                 | &lt;startup&gt; |
               |  (ct, rw)   |&lt;---+      +----&gt;| (ct, rw)  |
               +-------------+    |      |     +-----------+
                      |           |      |           |
+-----------+         |        +-----------+         |
| &lt;system&gt;  |         +-------&gt;| &lt;running&gt; |&lt;--------+
| (ct, ro)  |                  | (ct, rw)  |
+-----------+                  +-----------+
     |                              |
     |                              |
     |                              | // configuration transformations,
     +--------------+---------------+ // e.g., removal of nodes marked
                    |                 // as "inactive", expansion of
                    |                 // templates
                    v
              +------------+
              | &lt;intended&gt; |  // subject to validation
              | (ct, ro)   |
              +------------+
                     |       // changes applied, subject to
                     |       // local factors, e.g., missing
                     |       // resources, delays
 dynamic             |
 configuration       |   +-------- learned configuration
 datastores -----+   |   +-------- default configuration
                 |   |   |
                 v   v   v
             +---------------+
             | &lt;operational&gt; | &lt;-- system state
             | (ct + cf, ro) |
             +---------------+

ct = config true; cf = config false
rw = read-write; ro = read-only
boxes denote named datastores</artwork>
        </figure></t>

      <t>Configuration in &lt;system&gt; is undeletable to clients (e.g., a
      system-defined list entry can never be removed), even though a node
      defined in &lt;system&gt; may be overridden in &lt;running&gt;. If it is
      desired to enable a client to delete system configuration, it can be
      approximated using &lt;factory-default&gt; (<xref target="RFC8808"/>).
      If system initializes a value for a particular leaf which is overridden
      by the client with a different value in &lt;running&gt; (<xref
      target="modifying"/>), the node in &lt;running&gt; may be removed later,
      in which case system-initialized value defined in &lt;system&gt; may
      still be in use and appear in &lt;operational&gt;.</t>
    </section>

    <section title="Static Characteristics">
      <section title="Read-only to Clients">
        <t>The system datastore is read-only (i.e., edits towards
        &lt;system&gt; directly MUST be denied), though the client may be
        allowed to provide configuration that overrides the value of a
        system-initialized node (see <xref target="modifying"/>).</t>
      </section>

      <section title="No Impact to &lt;operational&gt;">
        <t>This work has no impact to &lt;operational&gt;. Notably, it does
        not define any new origin identity as it is able to use the existing
        "system" identity defined in <xref section="5.3.4" sectionFormat="of"
        target="RFC8342"/>. &lt;system&gt; enables system-generated nodes to
        be defined like configuration, i.e., made visible to clients in order
        for being referenced or configurable prior to present in
        &lt;operational&gt;. "config false" nodes are out of scope, hence
        existing "config false" nodes are not impacted by this work.</t>
      </section>
    </section>

    <section anchor="dynamic" title="Dynamic Behaviors">
      <section title="May Change via Software Upgrades or Resource Changes">
        <t>The contents of &lt;system&gt; MAY change dynamically under various
        conditions, such as license change, software upgrade, and
        system-controlled resources change (see <xref target="conditional"/>).
        The updates of system configuration may be obtained through YANG
        notifications (e.g., on-change notification) <xref
        target="RFC8639"/><xref target="RFC8641"/>.</t>

        <t>If system configuration changes, &lt;running&gt; SHOULD remain a
        valid configuration data tree. Any mechanisms to achieve this are
        outside the scope of this document.</t>
      </section>

      <section anchor="declare" title="Referencing System Configuration">
        <t>Clients may create configuration data in &lt;running&gt; that
        references nodes in &lt;system&gt;. Some implementations may define
        system nodes solely as a convenience for clients to reference. It is
        also possible for the clients to define their customized nodes for
        reference.</t>

        <t><xref target="declare-example"/> provides an example of a client
        referencing system-defined nodes.</t>
      </section>

      <section anchor="modifying"
               title="Modifying (Overriding) System Configuration">
        <t>In some cases, a server may allow some parts of system
        configuration (e.g., a leaf's value) to be modified. Modification of
        system configuration is achieved by the client writing configuration
        data in &lt;running&gt; that overrides the values of matched
        configuration nodes at the corresponding level in &lt;system&gt;.
        Configurations defined in &lt;running&gt; take precedence over system
        configuration nodes in &lt;system&gt; if the server allows the nodes
        to be modified (some implementations may have immutable system
        configuration as per <xref
        target="I-D.ietf-netmod-immutable-flag"/>).</t>

        <t><xref target="modify-example"/> provides an example of a client
        overriding a system-instantiated leaf's value.</t>
      </section>

      <section title="Configuring Descendant nodes of System Configuration">
        <t>A server may also allow a client to add nodes to a list entry in
        &lt;system&gt; by writing those additional nodes in &lt;running&gt;.
        Those additional data nodes may not exist in &lt;system&gt; (i.e., an
        addition rather than an override).</t>

        <t><xref target="configure-example"/> provides an example of a client
        configuring descendant nodes of a system-defined node.</t>
      </section>
    </section>

    <section anchor="system-datastore"
             title="The &quot;ietf-system-datastore&quot; Module">
      <section title="Data Model Overview">
        <t>This YANG module defines a new YANG identity named "system" that
        uses the "ds: conventional" identity defined in <xref
        target="RFC8342"/> as its base. A client can discover the system
        configuration datastore support on the server by reading the YANG
        library information from the operational state datastore.</t>

        <t>The system datastore is defined as a conventional configuration
        datastore and shares a common datastore schema with other conventional
        datastores.</t>

        <t>The following diagram illustrates the relationship amongst the
        "identity" statements defined in the "ietf-system-datastore" and
        "ietf-datastores" YANG modules: <figure>
            <artwork>Identities:
    +--- datastore
    |  +--- conventional
    |  |  +--- running
    |  |  +--- candidate
    |  |  +--- startup
    |  |  +--- system
    |  |  +--- intended
    |  +--- dynamic
    |  +--- operational</artwork>
          </figure>The diagram above uses syntax that is similar to but not
        defined in <xref target="RFC8340"/>.</t>
      </section>

      <section title="YANG Module">
        <figure>
          <preamble>&lt;CODE BEGINS&gt; file
          "ietf-system-datastore@YYYY-MM-DD.yang"</preamble>

              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(yang/ietf-system-datastore@YYYY-MM-DD.yang)
]]></artwork>

          <postamble>&lt;CODE ENDS&gt;</postamble>
        </figure>
      </section>
    </section>

    <section anchor="IANA" title="IANA Considerations">
      <section title="The &quot;IETF XML&quot; Registry">
        <t>This document registers two XML namespace URNs in the 'IETF XML
        registry', following the format defined in <xref
        target="RFC3688"/>.</t>

        <figure>
          <artwork>   URI: urn:ietf:params:xml:ns:yang:ietf-system-datastore
   Registrant Contact: The IESG.
   XML: N/A, the requested URIs are XML namespaces.</artwork>
        </figure>
      </section>

      <section title="The &quot;YANG Module Names&quot; Registry">
        <t>This document registers two module names in the 'YANG Module Names'
        registry, defined in <xref target="RFC6020"/>.</t>

        <figure>
          <artwork>      name: ietf-system-datastore
      prefix: sysds
      namespace: urn:ietf:params:xml:ns:yang:ietf-system-datatstore
      maintained by IANA? N
      RFC: XXXX // RFC Ed.: replace XXXX and remove this comment</artwork>
        </figure>
      </section>
    </section>

    <section anchor="scecurity" title="Security Considerations">
      <t>This section is modeled after the template described in <xref
      section="3.7" sectionFormat="of"
      target="I-D.ietf-netmod-rfc8407bis"/>.</t>

      <t>The "ietf-system-datastore" YANG module defines a data model that is
      designed to be accessed via YANG-based management protocols, such as
      NETCONF <xref target="RFC6241"/> and RESTCONF <xref target="RFC8040"/>.
      These protocols have to use a secure transport layer (e.g., SSH <xref
      target="RFC4252"/>, TLS <xref target="RFC8446"/>, and QUIC <xref
      target="RFC9000"/>) and have to use mutual authentication.</t>

      <t>The Network Configuration Access Control Model (NACM) <xref
      target="RFC8341"/> provides the means to restrict access for particular
      NETCONF or RESTCONF users to a preconfigured subset of all available
      NETCONF or RESTCONF protocol operations and content.</t>

      <t>The YANG module only defines a identity that uses the
      "ds:conventional" identity as its base. The module by itself does not
      expose any data nodes that are writable, date nodes that contain
      read-only state, or RPCs. As such, there are no additional security
      issues related to the YANG module that need to be considered.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include="reference.RFC.2119.xml"?>

      <?rfc include="reference.RFC.6241.xml"?>

      <?rfc include="reference.RFC.7950.xml"?>

      <?rfc include="reference.RFC.8040.xml"?>

      <?rfc include="reference.RFC.8341.xml"?>

      <?rfc include="reference.RFC.8342.xml"?>

      <?rfc include="reference.RFC.8639.xml"?>

      <?rfc include="reference.RFC.8641.xml"?>
    </references>

    <references title="Informative References">
      <?rfc include="reference.RFC.3688.xml"?>

      <?rfc include="reference.RFC.4252.xml"?>

      <?rfc include="reference.RFC.6020.xml"?>

      <?rfc include="reference.RFC.7952.xml"?>

      <?rfc include="reference.RFC.8174.xml"?>

      <?rfc include="reference.RFC.8340.xml"?>

      <?rfc include="reference.RFC.8407.xml"?>

      <?rfc include="reference.RFC.8446.xml"?>

      <?rfc include="reference.RFC.8525.xml"?>

      <?rfc include="reference.RFC.8808.xml"?>

      <?rfc include="reference.RFC.9000.xml"?>

      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netmod-immutable-flag.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>

      <xi:include href="https://datatracker.ietf.org/doc/bibxml3/reference.I-D.ietf-netmod-rfc8407bis.xml"
                  xmlns:xi="http://www.w3.org/2001/XInclude"/>
    </references>

    <section title="Example of Dynamic Behaviors">
      <t>This section presents some sample data models and corresponding
      contents of various datastores with different dynamic behaviors
      described in <xref target="dynamic"/>. The XML snippets are used only
      for illustration purposes.</t>

      <t/>

      <section anchor="declare-example"
               title="Referencing System-defined Nodes">
        <t>In this subsection, the following fictional module is used:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/example-application.yang)
              ]]></artwork>
          </figure>A fictional ACL YANG module is used as follows, which
        defines a leafref for the leaf-list "application" data node to refer
        to an existing application name.<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/example-acl.yang)
              ]]></artwork>
          </figure></t>

        <t>The server may predefine some applications as a convenience for
        clients, these applications are immediately-present system
        configuration. When the device is powered on, the system-instantiated
        application entries may be present in &lt;system&gt; as follows:</t>

        <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/applications-system.xml)
              ]]></artwork>
          </figure>

        <t>The client may also define its customized applications. Suppose the
        configuration of applications is present in &lt;running&gt; as
        follows:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/applications-running.xml)
              ]]></artwork>
            </figure></t>

        <t>If a client configures an ACL rule referencing some system-provided
        or customized applications, the configuration of ACL rule may be shown
        as follows:<figure>
             <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/applications-referenced.xml)
               ]]></artwork>
          </figure></t>

        <t>As different entries of application configuration in &lt;system&gt;
        and &lt;running&gt; is merged to create &lt;intended&gt;,
        &lt;operational&gt; might contain the configuration of applications as
        follows:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/applications-declare-operational.xml)
              ]]></artwork>
          </figure></t>
      </section>

      <section anchor="modify-example"
               title="Modifying a System-instantiated Leaf's Value">
        <t>This subsection uses the following fictional interface YANG
        module:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/example-interface.yang)
              ]]></artwork>
          </figure></t>

        <t>Suppose the system provides an always-present loopback interface
        (named "lo0") with a MTU value "65536", a default IPv4 address of
        "127.0.0.1", and a default IPv6 address of "::1". The configuration of
        "lo0" interface is present in &lt;system&gt; as follows:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/interface-system.xml)
              ]]></artwork>
          </figure></t>

        <t>A client modifies the value of MTU to 9216 and adds the following
        configuration into &lt;running&gt; using a "merge" operation:</t>

        <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/interface-running-overridden.xml)
              ]]></artwork>
        </figure>

        <t>Then the configuration of interfaces is present in
        &lt;operational&gt; as follows:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/interface-operational-overridden.xml)
              ]]></artwork>
            </figure></t>
      </section>

      <section anchor="configure-example"
               title="Configuring Descendant Nodes of a System-defined Node">
        <t>In the above example, imagine the client further configures the
        description node of a "lo0" interface in &lt;running&gt; using a
        "merge" operation as follows:</t>

        <figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/interface-running-addition.xml)
              ]]></artwork>
          </figure>

        <t>The configuration of interface "lo0" is present in
        &lt;operational&gt; as follows:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/interface-operational-addition.xml)
              ]]></artwork>
          </figure></t>
      </section>
    </section>

    <section title="Key Use Cases">
      <t>This section provides three use cases related to how &lt;system&gt;
      interacts with other datastores (e.g., &lt;candidate&gt;,
      &lt;running&gt;, &lt;intended&gt;, and &lt;operational&gt;). The
      following fictional interface data model is used:<figure>
              <artwork><![CDATA[
INSERT_TEXT_FROM_FILE(examples/example-interface-management.yang)          
                           ]]></artwork>
        </figure>For each use case, corresponding sample configuration in
      &lt;running&gt;, &lt;system&gt;, &lt;intended&gt; and
      &lt;operational&gt; are shown. The XML snippets are used only for
      illustration purposes.</t>

      <section title="Device Powers On">
        <t>When the device is powered on, suppose the system provides an
        always-present loopback interface (named "lo0") which is not
        explicitly configured in &lt;running&gt;. Thus, no configuration for
        interfaces appears in &lt;running&gt;;</t>

        <t>And the contents of &lt;system&gt; are:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt;  
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt;  
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt;  
    &lt;description&gt;system-defined interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>In this case, the configuration of loopback interface is only
        present in &lt;system&gt;, the configuration of interface in
        &lt;intended&gt; would be identical to the one in &lt;system&gt; shown
        above.</t>

        <t>And &lt;operational&gt; will show the system-provided loopback
        interface, note that &lt;operational&gt; also includes the default
        value specified in the YANG module:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"
            xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
            or:origin="or:system"&gt;
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt;  
    &lt;enabled or:origin="or:default"&gt;true&lt;/enabled&gt;  
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt;  
    &lt;description&gt;system-defined interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>
      </section>

      <section title="Client Commits Configuration">
        <t>If a client creates an interface "et-0/0/0" but the interface does
        not physically exist at this point, what is in &lt;running&gt; appears
        as follows:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>And the contents of &lt;system&gt; remain unchanged, only
        containing the "lo" loopback interface, since the interface "et-0/0/0"
        is not physically present:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>The contents of &lt;intended&gt; represent the merged data of
        &lt;system&gt; and &lt;running&gt;:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;  
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>Since the interface named "et-0/0/0" does not exist, the associated
        configuration is not present in &lt;operational&gt;, which appears as
        follows:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"
            xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
            or:origin="or:intended"&gt;
  &lt;interface or:origin="or:system"&gt;
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;enabled or:origin="or:default"&gt;true&lt;/enabled&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
&lt;/interfaces&gt;              </artwork>
        </figure>
      </section>

      <section title="Operator Installs Card into a Chassis">
        <t>When the interface is installed by the operator, the system will
        detect it and generate the associated conditionally-present interface
        configuration in &lt;system&gt;. The contents of &lt;running&gt; keep
        unchanged:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>And &lt;system&gt; might appear as follows:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;type&gt;ethernet&lt;/type&gt;
    &lt;description&gt;system-defined interface&lt;/description&gt;
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>Then &lt;intended&gt; contains the merged configuration of
        &lt;system&gt; and &lt;running&gt;:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;type&gt;ethernet&lt;/type&gt;
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;</artwork>
        </figure>

        <t>And the contents of &lt;operational&gt; appear as follows:</t>

        <figure>
          <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"
            xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
            or:origin="or:intended"&gt;
  &lt;interface or:origin="or:system"&gt;
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;enabled or:origin="or:default"&gt;true&lt;/enabled&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;type or:origin="or:system"&gt;ethernet&lt;/type&gt;
    &lt;enabled or:origin="or:default"&gt;true&lt;/enabled&gt;  
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;            </artwork>
        </figure>
      </section>

      <section title="Client further Commits Configuration">
        <t>If the client further sets the speed of interface "et-0/0/0" in
        &lt;running&gt; using a "merge" operation:<figure>
            <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;speed&gt;10Mb&lt;/speed&gt;
  &lt;/interface&gt; 
&lt;/interfaces&gt;           </artwork>
          </figure></t>

        <t>The contents of &lt;system&gt; keep unchanged:<figure>
            <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;type&gt;ethernet&lt;/type&gt;
    &lt;description&gt;system-defined interface&lt;/description&gt;
  &lt;/interface&gt; 
&lt;/interfaces&gt;         </artwork>
          </figure></t>

        <t>And the contents of &lt;intended&gt; which represents a merged
        results of &lt;running&gt; and &lt;system&gt; are as follows:<figure>
            <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"&gt; 
  &lt;interface&gt; 
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;type&gt;ethernet&lt;/type&gt;
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;speed&gt;10Mb&lt;/speed&gt;
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;           </artwork>
          </figure></t>

        <t>And &lt;operational&gt; would appear as follows:<figure>
            <artwork>&lt;interfaces xmlns="urn:example:interfacemgmt"
            xmlns:or="urn:ietf:params:xml:ns:yang:ietf-origin"
            or:origin="or:intended"&gt;
  &lt;interface or:origin="or:system"&gt;
    &lt;name&gt;lo0&lt;/name&gt;  
    &lt;type&gt;loopback&lt;/type&gt; 
    &lt;enabled&gt;true&lt;/enabled&gt; 
    &lt;ip-address&gt;127.0.0.1&lt;/ip-address&gt;  
    &lt;ip-address&gt;::1&lt;/ip-address&gt; 
    &lt;description&gt;system-defined interface&lt;/description&gt;  
  &lt;/interface&gt; 
  &lt;interface&gt; 
    &lt;name&gt;et-0/0/0&lt;/name&gt;
    &lt;type or:origin="or:system"&gt;ethernet&lt;/type&gt; 
    &lt;enabled or:origin="or:default"&gt;true&lt;/enabled&gt;
    &lt;ip-address&gt;192.168.10.10&lt;/ip-address&gt;
    &lt;speed&gt;10Mb&lt;/speed&gt; 
    &lt;description&gt;pre-provisioned interface&lt;/description&gt; 
  &lt;/interface&gt; 
&lt;/interfaces&gt;            </artwork>
          </figure></t>
      </section>
    </section>

    <section anchor="Acknowledgements" numbered="no" title="Acknowledgements">
      <t>The authors would like to thank for following for discussions and
      providing input to this document: Balazs Lengyel, Robert Wilton, Juergen
      Schoenwaelder, Andy Bierman, Martin Bjorklund, Mohamed Boucadair, Michal
      Va&scaron;ko, Alexander Clemm, and Timothy Carey.</t>
    </section>

    <section numbered="no" title="Contributors">
      <figure>
        <artwork>      
Kent Watsen
Watsen Networks
Email: kent+ietf@watsen.net

Jan Lindblad
Cisco Systems
Email: jlindbla@cisco.com

Jason Sterne
Nokia
Email: jason.sterne@nokia.com

Chongfeng Xie
China Telecom
Beijing
China
Email: xiechf@chinatelecom.cn
</artwork>
      </figure>
    </section>
  </back>
</rfc>
